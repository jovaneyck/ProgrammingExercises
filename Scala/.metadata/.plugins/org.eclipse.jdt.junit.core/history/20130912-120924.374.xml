<?xml version="1.0" encoding="UTF-8"?>
<testrun name="All tests" project="LanguageFeatures" tests="37" started="37" failures="0" errors="6" ignored="0">
  <testsuite name="test.Lists" time="0.126">
    <testcase name="lists should have an empty list concept" classname="test.Lists" time="0.045"/>
    <testcase name="lists should have a cons concept" classname="test.Lists" time="0.001"/>
    <testcase name="lists should have a friendly notation" classname="test.Lists" time="0.001"/>
    <testcase name="lists should support the map function" classname="test.Lists" time="0.003"/>
    <testcase name="lists should support the flatMap function" classname="test.Lists" time="0.002"/>
    <testcase name="lists should support filtering" classname="test.Lists" time="0.003"/>
    <testcase name="lists should support a fold" classname="test.Lists" time="0.008"/>
    <testcase name="lists should support a reduce" classname="test.Lists" time="0.003"/>
    <testcase name="lists should be easy to combine lists" classname="test.Lists" time="0.002"/>
    <testcase name="lists should support an easy for all check" classname="test.Lists" time="0.005"/>
    <testcase name="lists should support easy grouping" classname="test.Lists" time="0.004"/>
    <testcase name="lists should support easy sorting" classname="test.Lists" time="0.006"/>
    <testcase name="lists should support arbitrary sorting" classname="test.Lists" time="0.003"/>
    <testcase name="lists should allow easy updates" classname="test.Lists" time="0.04"/>
  </testsuite>
  <testsuite name="test.Streams" time="0.009">
    <testcase name="streams should represent an infinite list" classname="test.Streams" time="0.006"/>
    <testcase name="streams should be possible to create an infinite stream with complex values" classname="test.Streams" time="0.003"/>
  </testsuite>
  <testsuite name="test.Options" time="0.029">
    <testcase name="patterns should do stuff" classname="test.Options" time="0.029">
      <error>org.scalatest.exceptions.TestFailedException: implement&#13;
	at org.scalatest.Assertions$class.newAssertionFailedException(Assertions.scala:396)&#13;
	at org.scalatest.FlatSpec.newAssertionFailedException(FlatSpec.scala:1497)&#13;
	at org.scalatest.Assertions$class.fail(Assertions.scala:941)&#13;
	at org.scalatest.FlatSpec.fail(FlatSpec.scala:1497)&#13;
	at test.Options$$anonfun$1.apply(Options.scala:7)&#13;
	at test.Options$$anonfun$1.apply(Options.scala:7)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)&#13;
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:20)&#13;
	at org.scalatest.FlatSpecLike$$anon$1.apply(FlatSpecLike.scala:1617)&#13;
	at org.scalatest.Suite$class.withFixture(Suite.scala:1106)&#13;
	at org.scalatest.FlatSpec.withFixture(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$class.invokeWithFixture$1(FlatSpecLike.scala:1614)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)&#13;
	at org.scalatest.FlatSpecLike$class.runTest(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpec.runTest(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:390)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:427)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)&#13;
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)&#13;
	at org.scalatest.FlatSpecLike$class.runTests(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpec.runTests(FlatSpec.scala:1497)&#13;
	at org.scalatest.Suite$class.run(Suite.scala:1423)&#13;
	at org.scalatest.FlatSpec.org$scalatest$FlatSpecLike$$super$run(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)&#13;
	at org.scalatest.FlatSpecLike$class.run(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpec.run(FlatSpec.scala:1497)&#13;
	at org.scalatest.junit.JUnitRunner.run(JUnitRunner.scala:97)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
  <testsuite name="test.ClassesAndObjects" time="0.027">
    <testcase name="classes should have properties" classname="test.ClassesAndObjects" time="0.001"/>
    <testcase name="classes should support read-only attributes" classname="test.ClassesAndObjects" time="0.001"/>
    <testcase name="classes should support mutable state" classname="test.ClassesAndObjects" time="0.003"/>
    <testcase name="classes should support private methods" classname="test.ClassesAndObjects" time="0.003"/>
    <testcase name="classes should support invariants and preconditions" classname="test.ClassesAndObjects" time="0.005"/>
    <testcase name="classes should support post-condition checking" classname="test.ClassesAndObjects" time="0.005"/>
    <testcase name="case classes should not require the new keyword, handy for pattern matching!" classname="test.ClassesAndObjects" time="0.003"/>
    <testcase name="objects should act as a singleton" classname="test.ClassesAndObjects" time="0.003"/>
    <testcase name="companion objects should act as a factory for classes" classname="test.ClassesAndObjects" time="0.003"/>
  </testsuite>
  <testsuite name="test.DesignPatterns" time="0.002">
    <testcase name="patterns should do stuff" classname="test.DesignPatterns" time="0.002">
      <error>org.scalatest.exceptions.TestFailedException: implement&#13;
	at org.scalatest.Assertions$class.newAssertionFailedException(Assertions.scala:396)&#13;
	at org.scalatest.FlatSpec.newAssertionFailedException(FlatSpec.scala:1497)&#13;
	at org.scalatest.Assertions$class.fail(Assertions.scala:941)&#13;
	at org.scalatest.FlatSpec.fail(FlatSpec.scala:1497)&#13;
	at test.DesignPatterns$$anonfun$1.apply(DesignPatterns.scala:11)&#13;
	at test.DesignPatterns$$anonfun$1.apply(DesignPatterns.scala:11)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)&#13;
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:20)&#13;
	at org.scalatest.FlatSpecLike$$anon$1.apply(FlatSpecLike.scala:1617)&#13;
	at org.scalatest.Suite$class.withFixture(Suite.scala:1106)&#13;
	at org.scalatest.FlatSpec.withFixture(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$class.invokeWithFixture$1(FlatSpecLike.scala:1614)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)&#13;
	at org.scalatest.FlatSpecLike$class.runTest(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpec.runTest(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:390)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:427)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)&#13;
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)&#13;
	at org.scalatest.FlatSpecLike$class.runTests(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpec.runTests(FlatSpec.scala:1497)&#13;
	at org.scalatest.Suite$class.run(Suite.scala:1423)&#13;
	at org.scalatest.FlatSpec.org$scalatest$FlatSpecLike$$super$run(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)&#13;
	at org.scalatest.FlatSpecLike$class.run(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpec.run(FlatSpec.scala:1497)&#13;
	at org.scalatest.junit.JUnitRunner.run(JUnitRunner.scala:97)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
  <testsuite name="test.Functions" time="0.002">
    <testcase name="patterns should do stuff" classname="test.Functions" time="0.002">
      <error>org.scalatest.exceptions.TestFailedException: implement&#13;
	at org.scalatest.Assertions$class.newAssertionFailedException(Assertions.scala:396)&#13;
	at org.scalatest.FlatSpec.newAssertionFailedException(FlatSpec.scala:1497)&#13;
	at org.scalatest.Assertions$class.fail(Assertions.scala:941)&#13;
	at org.scalatest.FlatSpec.fail(FlatSpec.scala:1497)&#13;
	at test.Functions$$anonfun$1.apply(Functions.scala:12)&#13;
	at test.Functions$$anonfun$1.apply(Functions.scala:12)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)&#13;
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:20)&#13;
	at org.scalatest.FlatSpecLike$$anon$1.apply(FlatSpecLike.scala:1617)&#13;
	at org.scalatest.Suite$class.withFixture(Suite.scala:1106)&#13;
	at org.scalatest.FlatSpec.withFixture(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$class.invokeWithFixture$1(FlatSpecLike.scala:1614)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)&#13;
	at org.scalatest.FlatSpecLike$class.runTest(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpec.runTest(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:390)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:427)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)&#13;
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)&#13;
	at org.scalatest.FlatSpecLike$class.runTests(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpec.runTests(FlatSpec.scala:1497)&#13;
	at org.scalatest.Suite$class.run(Suite.scala:1423)&#13;
	at org.scalatest.FlatSpec.org$scalatest$FlatSpecLike$$super$run(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)&#13;
	at org.scalatest.FlatSpecLike$class.run(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpec.run(FlatSpec.scala:1497)&#13;
	at org.scalatest.junit.JUnitRunner.run(JUnitRunner.scala:97)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
  <testsuite name="test.Traits" time="0.016">
    <testcase name="traits should act as an interface that can have an implementation" classname="test.Traits" time="0.003"/>
    <testcase name="traits should support multiple inheritance" classname="test.Traits" time="0.006"/>
    <testcase name="traits should have no problems with the 'diamond problem'" classname="test.Traits" time="0.007"/>
  </testsuite>
  <testsuite name="test.Generics" time="0.002">
    <testcase name="patterns should do stuff" classname="test.Generics" time="0.002">
      <error>org.scalatest.exceptions.TestFailedException: implement&#13;
	at org.scalatest.Assertions$class.newAssertionFailedException(Assertions.scala:396)&#13;
	at org.scalatest.FlatSpec.newAssertionFailedException(FlatSpec.scala:1497)&#13;
	at org.scalatest.Assertions$class.fail(Assertions.scala:941)&#13;
	at org.scalatest.FlatSpec.fail(FlatSpec.scala:1497)&#13;
	at test.Generics$$anonfun$1.apply(Generics.scala:7)&#13;
	at test.Generics$$anonfun$1.apply(Generics.scala:7)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)&#13;
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:20)&#13;
	at org.scalatest.FlatSpecLike$$anon$1.apply(FlatSpecLike.scala:1617)&#13;
	at org.scalatest.Suite$class.withFixture(Suite.scala:1106)&#13;
	at org.scalatest.FlatSpec.withFixture(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$class.invokeWithFixture$1(FlatSpecLike.scala:1614)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)&#13;
	at org.scalatest.FlatSpecLike$class.runTest(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpec.runTest(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:390)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:427)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)&#13;
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)&#13;
	at org.scalatest.FlatSpecLike$class.runTests(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpec.runTests(FlatSpec.scala:1497)&#13;
	at org.scalatest.Suite$class.run(Suite.scala:1423)&#13;
	at org.scalatest.FlatSpec.org$scalatest$FlatSpecLike$$super$run(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)&#13;
	at org.scalatest.FlatSpecLike$class.run(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpec.run(FlatSpec.scala:1497)&#13;
	at org.scalatest.junit.JUnitRunner.run(JUnitRunner.scala:97)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
  <testsuite name="test.ForComprehensions" time="0.002">
    <testcase name="patterns should do stuff" classname="test.ForComprehensions" time="0.002">
      <error>org.scalatest.exceptions.TestFailedException: implement&#13;
	at org.scalatest.Assertions$class.newAssertionFailedException(Assertions.scala:396)&#13;
	at org.scalatest.FlatSpec.newAssertionFailedException(FlatSpec.scala:1497)&#13;
	at org.scalatest.Assertions$class.fail(Assertions.scala:941)&#13;
	at org.scalatest.FlatSpec.fail(FlatSpec.scala:1497)&#13;
	at test.ForComprehensions$$anonfun$1.apply(ForComprehensions.scala:7)&#13;
	at test.ForComprehensions$$anonfun$1.apply(ForComprehensions.scala:7)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)&#13;
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:20)&#13;
	at org.scalatest.FlatSpecLike$$anon$1.apply(FlatSpecLike.scala:1617)&#13;
	at org.scalatest.Suite$class.withFixture(Suite.scala:1106)&#13;
	at org.scalatest.FlatSpec.withFixture(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$class.invokeWithFixture$1(FlatSpecLike.scala:1614)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)&#13;
	at org.scalatest.FlatSpecLike$class.runTest(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpec.runTest(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:390)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:427)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)&#13;
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)&#13;
	at org.scalatest.FlatSpecLike$class.runTests(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpec.runTests(FlatSpec.scala:1497)&#13;
	at org.scalatest.Suite$class.run(Suite.scala:1423)&#13;
	at org.scalatest.FlatSpec.org$scalatest$FlatSpecLike$$super$run(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)&#13;
	at org.scalatest.FlatSpecLike$class.run(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpec.run(FlatSpec.scala:1497)&#13;
	at org.scalatest.junit.JUnitRunner.run(JUnitRunner.scala:97)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
  <testsuite name="test.ValVarDef" time="0.002">
    <testcase name="patterns should do stuff" classname="test.ValVarDef" time="0.002">
      <error>org.scalatest.exceptions.TestFailedException: implement&#13;
	at org.scalatest.Assertions$class.newAssertionFailedException(Assertions.scala:396)&#13;
	at org.scalatest.FlatSpec.newAssertionFailedException(FlatSpec.scala:1497)&#13;
	at org.scalatest.Assertions$class.fail(Assertions.scala:941)&#13;
	at org.scalatest.FlatSpec.fail(FlatSpec.scala:1497)&#13;
	at test.ValVarDef$$anonfun$1.apply(ValVarDef.scala:8)&#13;
	at test.ValVarDef$$anonfun$1.apply(ValVarDef.scala:8)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer$$anonfun$apply$1.apply(Transformer.scala:22)&#13;
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)&#13;
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:22)&#13;
	at org.scalatest.Transformer.apply(Transformer.scala:20)&#13;
	at org.scalatest.FlatSpecLike$$anon$1.apply(FlatSpecLike.scala:1617)&#13;
	at org.scalatest.Suite$class.withFixture(Suite.scala:1106)&#13;
	at org.scalatest.FlatSpec.withFixture(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$class.invokeWithFixture$1(FlatSpecLike.scala:1614)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)&#13;
	at org.scalatest.FlatSpecLike$class.runTest(FlatSpecLike.scala:1626)&#13;
	at org.scalatest.FlatSpec.runTest(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:390)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:427)&#13;
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)&#13;
	at scala.collection.immutable.List.foreach(List.scala:318)&#13;
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)&#13;
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)&#13;
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)&#13;
	at org.scalatest.FlatSpecLike$class.runTests(FlatSpecLike.scala:1684)&#13;
	at org.scalatest.FlatSpec.runTests(FlatSpec.scala:1497)&#13;
	at org.scalatest.Suite$class.run(Suite.scala:1423)&#13;
	at org.scalatest.FlatSpec.org$scalatest$FlatSpecLike$$super$run(FlatSpec.scala:1497)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)&#13;
	at org.scalatest.FlatSpecLike$class.run(FlatSpecLike.scala:1730)&#13;
	at org.scalatest.FlatSpec.run(FlatSpec.scala:1497)&#13;
	at org.scalatest.junit.JUnitRunner.run(JUnitRunner.scala:97)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
  <testsuite name="test.PatternMatching" time="0.005">
    <testcase name="pattern matching, you could see this as 'unpacking' objects should work on case classes" classname="test.PatternMatching" time="0.001"/>
    <testcase name="pattern matching, you could see this as 'unpacking' objects should be possible to use matching to unpack data structures" classname="test.PatternMatching" time="0.003"/>
    <testcase name="pattern matching, you could see this as 'unpacking' objects should support wildcards" classname="test.PatternMatching" time="0.001"/>
  </testsuite>
</testrun>
